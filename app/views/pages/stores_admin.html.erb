<div class="container">
  <h1 class="stores-header">Ubicaciones definidas para <span class="category-selected"><%= @stores.first.restaurant.name %></span></h1>
  <div class="stores-wrapper">
    <% @stores.each do |store| %>
    <div class="store-card">
      <h2><%= store.id %><%= store.name %></h2>
      <div class="map-wrapper">
        <div class="map-canvas" data-polygon="<%= store.polygon.to_json %>" ></div>
        <%= simple_form_for store do |f| %>
        <%= f.input :polygon, as: :hidden %>
        <%= f.submit "Actualizar Ã¡rea", class:"btn btn-primary" %>
        <% end %>
      </div>
    </div>
    <% end %>
  </div>
</div>
<script>

  function buildMap(element, hash) {

    function createInitialPolygon() {
      return new Promise(resolve => {
        const standardData = [
        new google.maps.LatLng(-34.60372,-58.38159),
        new google.maps.LatLng(-34.60372,-58.38159),
        new google.maps.LatLng(-34.60768,-58.42622),
        new google.maps.LatLng(-34.58026,-58.45747),
        ];
        const initialPolygon = JSON.parse(JSON.parse(element.dataset.polygon));
        const createPolygon = function(initialPolygon) {
          return new Promise(resolve => {
            const initialPolygonDB = initialPolygon.map((point) => {
              return new google.maps.LatLng(point.lat,point.lng)
            })
            resolve(initialPolygonDB)
          })
        }
        if (initialPolygon.length === 0) {
          resolve(standardData);
        } else {
          return createPolygon(initialPolygon).then(data => resolve(data))
        }
      })
    }

    createInitialPolygon().then((drawPoligon) => {
    // Map Center
    var myLatLng = new google.maps.LatLng(-34.603722, -58.381592);
    // General Options
    var mapOptions = {
      zoom: 12,
      center: myLatLng,
      mapTypeId: google.maps.MapTypeId.RoadMap
    };

    var map = new google.maps.Map(element, mapOptions);

    function createDatabasePoligon(polygon) {
      return new Promise(resolve => {
        const updatedPolygon = polygon.map((data) => {
          const latLng = {lat: eval(data.split(",")[0]), lng: eval(data.split(",")[1])}
          return latLng
        })
        resolve(updatedPolygon)
      })
    }
    // Styling & Controls
    const myPolygon = new google.maps.Polygon({
      paths: drawPoligon,
      draggable: true,
      editable: true,
      strokeColor: '#2c9c7c',
      strokeOpacity: 0.8,
      strokeWeight: 2,
      fillColor: '#2c9c7c',
      fillOpacity: 0.35
    });
    myPolygon.setMap(map);

    function updatePolygonData(array, point) {
      array.push(point);
      createDatabasePoligon(array).then((data) => {
        hash.value = JSON.stringify(data)
      })
    }

    function getPolygonCoords() {
      var len = myPolygon.getPath().getLength();
      var htmlStr = "";
      var polygonData = [];
      for (var i = 0; i < len; i++) {
        htmlStr += "new google.maps.LatLng(" + myPolygon.getPath().getAt(i).toUrlValue(5) + "), ";
        updatePolygonData(polygonData, myPolygon.getPath().getAt(i).toUrlValue(5))
      }
    }

    google.maps.event.addListener(myPolygon.getPath(), "insert_at", getPolygonCoords);
    google.maps.event.addListener(myPolygon.getPath(), "set_at", getPolygonCoords);
  })
  }

  document.addEventListener("DOMContentLoaded", function() {
    const maps = document.querySelectorAll(".map-wrapper")
    maps.forEach((map) => {
      buildMap(map.children[0], map.children[1].children[3].children[0])
    })
  })
</script>

<style>
  .map-canvas {
    width: auto;
    height: 500px;
  }
  .info {
    color: #222;
  }
  .lngLat {
    color: #fff;
    margin-bottom: 5px;
  }
  .lngLat .one {
    padding-left: 250px;
  }
  .lngLat .two {
    padding-left: 34px;
  }
  .info {
    height: 140px;
    float: left;
    margin-bottom: 30px;
    border: solid 2px #eee;
    -moz-border-radius: 3px;
    -webkit-border-radius: 3px;
    border-radius: 3px;
    -moz-box-shadow: inset 0 2px 5px #444;
    -webkit-box-shadow: inset 0 2px 5px #444;
    box-shadow: inset 0 2px 5px #444;
  }
  .info, .lngLat {
    font-family: arial, sans-serif;
    font-size: 12px;
    padding-top: 10px;
    width: 270px;
  }
</style>
